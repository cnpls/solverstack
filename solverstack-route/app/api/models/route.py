# coding: utf-8

from __future__ import absolute_import

from app import util
from app.api.models.base_model_ import Model


class Route(Model):
    """NOTE: This class is auto generated by the swagger code generator
    program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        vehicle_id: int = None,
        stop_number: int = None,
    ):  # noqa: E501
        """Route - a model defined in Swagger

        :param vehicle_id: The vehicle_id of this Route.  # noqa: E501
        :type vehicle_id: int
        :param stop_number: The stop_number of this Route.  # noqa: E501
        :type stop_number: int
        """
        self.swagger_types = {
            "vehicle_id": int,
            "stop_number": int,
        }

        self.attribute_map = {
            "vehicle_id": "vehicle_id",
            "stop_number": "stop_number",
        }
        self._vehicle_id = vehicle_id
        self._stop_number = stop_number

    @classmethod
    def from_dict(cls, dikt) -> "Route":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Route of this Route.  # noqa: E501
        :rtype: Route
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vehicle_id(self) -> int:
        """Gets the vehicle_id of this Route.


        :return: The vehicle_id of this Route.
        :rtype: int
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id: int):
        """Sets the vehicle_id of this Route.


        :param vehicle_id: The vehicle_id of this Route.
        :type vehicle_id: int
        """
        if vehicle_id is None:
            raise ValueError(
                "Invalid value for `vehicle_id`, must not be `None`"
            )  # noqa: E501

        self._vehicle_id = vehicle_id

    @property
    def stop_number(self) -> int:
        """Gets the stop_number of this Route.


        :return: The stop_number of this Route.
        :rtype: int
        """
        return self._stop_number

    @stop_number.setter
    def stop_number(self, stop_number: int):
        """Sets the stop_number of this Route.


        :param stop_number: The stop_number of this Route.
        :type stop_number: int
        """
        if stop_number is None:
            raise ValueError(
                "Invalid value for `stop_number`, must not be `None`"
            )  # noqa: E501

        self._stop_number = stop_number
