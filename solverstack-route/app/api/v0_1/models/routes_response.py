# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from app import util
from app.api.models.base_model_ import Model
from app.api.models.demand import Demand
from app.api.models.origin import Origin  # noqa: F401,E501
from app.api.models.route import Route  # noqa: F401,E501
from app.api.models.stack_id import StackID
from app.api.models.unit import Unit  # noqa: F401,E501


class RoutesResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator
    program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        stack_id: StackID = None,
        origin: Origin = None,
        demand: Demand = None,
        route: List[Route] = None,
        unit: Unit = None,
        vehicle_capacity: int = None,
    ):  # noqa: E501
        """RoutesResponse - a model defined in Swagger

        :param stack_id: TODO
        :param origin: The origin of this RoutesResponse.  # noqa: E501
        :type origin: Origin
        :param demand: The demand of this RoutesResponse.
        :type demand: Demand
        :param Route: The Route of this RoutesResponse.  # noqa: E501
        :type Route: List[Route]
        :param unit: The unit of this RoutesResponse.  # noqa: E501
        :type unit: Unit
        :param vehicle_capacity: The vehicle_capacity of this RoutesResponse.  # noqa: E501
        :type vehicle_capacity: int
        """
        self.swagger_types = {
            "stack_id": StackID,
            "origin": Origin,
            "demand": Demand,
            "route": List[Route],
            "unit": Unit,
            "vehicle_capacity": int,
        }

        self.attribute_map = {
            "stack_id": "stack_id",
            "origin": "origin",
            "demand": "demand",
            "route": "route",
            "unit": "unit",
            "vehicle_capacity": "vehicle_capacity",
        }
        self._stack_id = stack_id
        self._origin = origin
        self._demand = demand
        self._route = route
        self._unit = unit
        self._vehicle_capacity = vehicle_capacity

    @classmethod
    def from_dict(cls, dikt) -> "RoutesResponse":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoutesResponse of this RoutesResponse.  # noqa: E501
        :rtype: RoutesResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_id(self) -> StackID:
        """Gets the stack_id of this RoutesResponse.


        :return: The stack_id of this RoutesResponse.
        :rtype: StackID
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id: StackID):
        """Sets the stack_id of this RoutesResponse.


        :param stack_id: The stack_id of this RoutesResponse.
        :type stack_id: StackID
        """
        if stack_id is None:
            raise ValueError("Invalid value for `stack_id`, must not be `None`")  # noqa: E501

        self._stack_id = stack_id

    @property
    def origin(self) -> Origin:
        """Gets the origin of this RoutesResponse.


        :return: The origin of this RoutesResponse.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin: Origin):
        """Sets the origin of this RoutesResponse.


        :param origin: The origin of this RoutesResponse.
        :type origin: Origin
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def demand(self) -> Demand:
        """Gets the demand of this RoutesResponse.


        :return: The demand of this RoutesResponse.
        :rtype: Demand
        """
        return self._demand

    @demand.setter
    def demand(self, demand: Demand):
        """Sets the demand of this RoutesResponse.


        :param demand: The demand of this RoutesResponse.
        :type demand: Demand
        """
        if demand is None:
            raise ValueError("Invalid value for `demand`, must not be `None`")

        self._demand = demand

    @property
    def route(self) -> List[Route]:
        """Gets the Route of this RoutesResponse.


        :return: The route of this RoutesResponse.
        :rtype: List[Route]
        """
        return self._route

    @route.setter
    def route(self, route: List[Route]):
        """Sets the route of this RoutesResponse.


        :param route: The Route of this RoutesResponse.
        :type route: List[Route]
        """
        if route is None:
            raise ValueError("Invalid value for `route`, must not be `None`")  # noqa: E501

        self._route = route

    @property
    def unit(self) -> Unit:
        """Gets the unit of this RoutesResponse.


        :return: The unit of this RoutesResponse.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit: Unit):
        """Sets the unit of this RoutesResponse.


        :param unit: The unit of this RoutesResponse.
        :type unit: Unit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def vehicle_capacity(self) -> int:
        """Gets the vehicle_capacity of this RoutesResponse.


        :return: The vehicle_capacity of this RoutesResponse.
        :rtype: int
        """
        return self._vehicle_capacity

    @vehicle_capacity.setter
    def vehicle_capacity(self, vehicle_capacity: int):
        """Sets the vehicle_capacity of this RoutesResponse.


        :param vehicle_capacity: The vehicle_capacity of this RoutesResponse.
        :type vehicle_capacity: int
        """
        if vehicle_capacity is None:
            raise ValueError("Invalid value for `vehicle_capacity`, must not be `None`")  # noqa: E501

        self._vehicle_capacity = vehicle_capacity
